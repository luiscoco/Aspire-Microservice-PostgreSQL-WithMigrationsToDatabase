@page "/examplecomponent"

@rendermode InteractiveServer

@using AspirePostgreSQL.Web.Services
@using AspirePostgreSQL.Web.Models

@inject ArticleModelService ArticleModelService

<h3 class="text-center">Example Models</h3>

@if (articleModels == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Title</th>
                    <th>Content</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var model in articleModels)
                {
                    <tr>
                        <td>@model.Title</td>
                        <td>@model.Content</td>
                        <td>
                            <button class="btn btn-warning btn-sm me-2" @onclick="() => ShowUpdateForm(model)">Update</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteArticleModel(model.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<div class="mt-3">
    <button class="btn btn-primary" @onclick="ShowCreateForm">Create New Item</button>
    <button class="btn btn-secondary" @onclick="FetchArticleModels">Refresh</button>
</div>

@if (isFormVisible)
{
    <div class="mt-3">
        <h4>@modalTitle</h4>
        <div class="mb-3">
            <label for="modelTitle" class="form-label">Title</label>
            <input type="text" class="form-control" id="modelTitle" 
                   @bind="currentModel.Title" />
        </div>
        <div class="mb-3">
            <label for="modelContent" class="form-label">Content</label>
            <input type="text" class="form-control" id="modelContent" 
                   @bind="currentModel.Content" />
        </div>
        <button class="btn btn-primary" @onclick="SaveModel">Save changes</button>
        <button class="btn btn-secondary" @onclick="HideForm">Cancel</button>
        <p class="text-danger mt-3">@message</p>
    </div>
}

@code {
    private List<Article> articleModels;
    private Article currentModel = new Article();
    private bool isCreateMode = true;
    private bool isFormVisible = false;
    private string modalTitle = "Create New Item";
    public string message = "";

    protected override async Task OnInitializedAsync()
    {
        await FetchArticleModels();
    }

    private async Task FetchArticleModels()
    {
        articleModels = await ArticleModelService.GetAllArticleModels();
    }

    private void ShowCreateForm()
    {
        modalTitle = "Create New Item";
        isCreateMode = true;
        isFormVisible = true;
        StateHasChanged();
    }

    private void ShowUpdateForm(Article model)
    {
        currentModel = new Article
        {
            Id = model.Id,
            Title = model.Title,
            Content = model.Content
        };
        modalTitle = "Update Item";
        isCreateMode = false;
        isFormVisible = true;
        StateHasChanged();
    }

    private void HideForm()
    {
        isFormVisible = false;
        message = "";
    }

    private async Task SaveModel()
    {
        if (string.IsNullOrWhiteSpace(currentModel.Title) ||
            string.IsNullOrWhiteSpace(currentModel.Content))
        {
            message = "Missing required fields.";
            return;
        }

        HttpResponseMessage response;
        if (isCreateMode)
        {
            response = await ArticleModelService.AddArticleModel(currentModel);
        }
        else
        {
            response = await ArticleModelService.UpdateArticleModel(currentModel.Id, currentModel);
        }

        if (response.IsSuccessStatusCode)
        {
            await FetchArticleModels();
            HideForm();
        }
        else
        {
            message = "Error: " + response.ReasonPhrase;
        }
    }

    private async Task DeleteArticleModel(Guid id)
    {
        var response = await ArticleModelService.DeleteArticleModel(id);

        if (response.IsSuccessStatusCode)
        {
            await FetchArticleModels();
        }
        else
        {
            message = "Error deleting model: " + response.ReasonPhrase;
        }
    }
}
